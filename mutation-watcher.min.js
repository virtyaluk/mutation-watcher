/* 
 * mutation-watcher 
 * https://github.com/virtyaluk/mutation-watcher 
 * 
 * Copyright (c) 2015 Bohdan Shtepan 
 * Licensed under the  license. 
 */


!function(a,b){"use strict";"function"==typeof define&&define.amd?define("MutationWatcher",[],b(a)):"undefined"!=typeof module?module.exports=b(a):a.MutationWatcher=b(a)}(this,function(a){"use strict";a.MutationObserver=a.MutationObserver||a.WebKitMutationObserver||a.MozMutationObserver;var b=a.Element.prototype,c=Array.isArray,d=b.matches||b.webkitMatchesSelector||b.mozMatchesSelector||b.msMatchesSelector||b.oMatchesSelector||b.matchesSelector,e=function(a){return"object"==typeof a&&null!==a},f=function(a){return!!(a&&a.constructor&&a.call&&a.apply)},g={attributes:"attribute-change",elements:"element-change",characterData:"characterdata-change"},h=function(b,c,d){var e;try{e=new a.CustomEvent(c,{detail:d})}catch(f){e=a.document.createEvent("CustomEvent"),e.initCustomEvent(c,!0,!0,d)}b.dispatchEvent(e)},i=function(a,b,c,d){var e={};return e.attributes=a&&a[0],e.matchAttributes=a&&a[0]&&a[1]?a[1]:null,e.elements=b&&b[0],e.matchElements=b&&b[0]&&b[1]?b[1]:null,e.characterData=c&&c[0],e.subtree=d,e},j=function(a){var b=new p(a),e=null,f=this;if(b.type="childList"==b.type?"elements":b.type,c(f._scope.records)||(f._scope.records=[]),f._scope.options.attributes&&"attributes"===b.type)e=b,f._scope.options.matchAttributes&&f._scope.options.matchAttributes.length&&-1===f._scope.options.matchAttributes.indexOf(b.attributeName)&&(e=null);else if(f._scope.options.elements&&"elements"===b.type){if(e=b,f._scope.options.matchElements&&f._scope.options.matchElements.length){for(var g,i=!1,j=b.addedNodes&&b.addedNodes.length?b.addedNodes[0]:b.removedNodes[0],k=0,l=f._scope.options.matchElements.length;l>k;k++)g=f._scope.options.matchElements[k],d.call(j,g)&&(i=!0);i||(e=null)}}else f._scope.options.characterData&&"characterData"===b.type&&(e=b);f.allowCustomEvents&&h(f._scope.target,o.customEventsNames[b.type],b),(f._scope.options.attributes||f._scope.options.characterData)&&f._scope.options.subtree&&b.target!==f.target&&(b=null),e&&(f._scope.callback&&f._scope.callback(e,f),f._scope.records.push(b))},k=function(){var a=[];return this._scope.records&&(a=this._scope.records.slice(0),this._scope.records.splice(0,this._scope.records.length)),a},l=function(b,d){var f=this,g=null;if(b&&b instanceof a.Node?f._scope.target=b:("string"==typeof b&&(f._scope.target=a.document.querySelector(b)),f._scope.target||(f._scope.target=a.document)),d||(d={all:!0}),"string"==typeof d)switch(d=d.toLocaleLowerCase().trim()){case"attributes":g=i([!0,null],null,null,!1);break;case"elements":g=i(null,[!0,null],null,!1);break;case"characterdata":g=i(null,null,[!0],!1);break;default:g=i([!0,null],[!0,null],[!0,null],!1)}else if(e(d)){var h=[],j=[],k=[],l=!!d.subtree;d.all||!d.attributes&&!d.elements&&!d.characterData?(h=[!0,null],j=[!0,null],k=[!0,null]):(c(d.attributes)?(h[0]=!0,h[1]=d.attributes):(h[0]=!!d.attributes,h[1]=d.matchAttributes&&h[0]?d.matchAttributes:null),c(d.elements)?(j[0]=!0,j[1]=d.elements):(j[0]=!!d.elements,j[1]=d.matchElements&&j[0]?d.matchElements:null),c(d.characterData)?(k[0]=!0,k[1]=d.characterData):(k[0]=!!d.characterData,k[1]=d.characterData&&k[0]?d.characterData:null)),g=i(h,j,k,l)}f._scope.options=g},m=function(b,d){var e=this;if(e._scope.isObserving&&e.disconnect(),l.call(e,b,d),a.MutationObserver){e._scope.mutationObserver=new a.MutationObserver(function(a){a.forEach(e._scope.mutationPublisher)});var f={attributes:!0,childList:!0,characterData:!0,attributeOldValue:!0,characterDataOldValue:!0,subtree:e._scope.options.subtree};c(e._scope.options.matchAttributes)&&(f.attributeFilter=e._scope.options.matchAttributes),e._scope.mutationObserver.observe(e._scope.target,f)}else e._scope.target.addEventListener("DOMAttrModified",e._scope.mutationPublisher,!1),e._scope.target.addEventListener("DOMNodeInserted",e._scope.mutationPublisher,!1),e._scope.target.addEventListener("DOMNodeRemoved",e._scope.mutationPublisher,!1),e._scope.target.addEventListener("DOMCharacterDataModified",e._scope.mutationPublisher,!1);return e._scope.isObserving=!0,e},n=function(){return a.MutationObserver&&this._scope.mutationObserver?this._scope.mutationObserver.disconnect():(this._scope.target.removeEventListener("DOMAttrModified",this._scope.mutationPublisher,!1),this._scope.target.removeEventListener("DOMNodeInserted",this._scope.mutationPublisher,!1),this._scope.target.removeEventListener("DOMNodeRemoved",this._scope.mutationPublisher,!1),this._scope.target.removeEventListener("DOMCharacterDataModified",this._scope.mutationPublisher,!1)),this._scope.isObserving=!1,k.call(this)},o=function(a,b){if(this instanceof o){var c=this;return c._scope={records:null,callback:f(a)?a:null,mutationPublisher:j.bind(c),isObserving:!1,mutationObserver:null,target:null,options:null},Object.seal(c._scope),c.allowCustomEvents=f(a)?!!b:!0,c}return new o(a,b)},p=function(a){if(this instanceof p){var b=this;switch(b.target=a.target||null,b.type=a.type||null,b.attributeName=a.attributeName||null,b.attributeNamespace=a.attributeNamespace||null,b.oldValue=a.oldValue||null,b.newValue=a.newValue||null,b.attributeChange=0,b.relatedNode=a.relatedNode||null,b.addedNodes=a.addedNodes||null,b.removedNodes=a.removedNodes||null,b.previousSibling=a.previousSibling||null,b.nextSibling=a.nextSibling||null,a.type){case"DOMAttrModified":b.target=a.target,b.type="attributes",b.attributeName=a.attrName,b.oldValue=a.prevValue,b.newValue=a.newValue,b.attributeChange=a.attrChange,a.relatedNode&&(b.relatedNode=a.relatedNode);break;case"DOMCharacterDataModified":b.em.type="characterData",b.target=a.target,b.oldValue=a.prevValue,b.newValue=a.newValue;break;case"DOMNodeInserted":case"DOMNodeRemoved":b.type="elements",b.target=a.relatedNode,"DOMNodeInserted"===a.type?b.addedNodes=[a.target]:b.removedNodes=[a.target],b.nextSibling=a.target.nextSibling||null,b.previousSibling=a.target.previousSibling||null}return b}return new p(a)};return o.prototype.watch=m,o.prototype.disconnect=n,o.prototype.takeRecords=k,o.customEventsNames=g,o});
//# sourceMappingURL=mutation-watcher.min.js.map